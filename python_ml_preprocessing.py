# -*- coding: utf-8 -*-
"""
Created on Tue Nov 14 10:36:42 2023

@author: Marko
"""
# Одне гаряче кодування
# Ми не можемо використовувати стовпець «Автомобіль» або «Модель» у наших даних, оскільки вони не є числовими. Неможливо визначити лінійний зв’язок між категоріальною змінною, Автомобіль або Модель, і числовою змінною, CO2.
# Щоб вирішити цю проблему, ми повинні мати числове представлення категоріальної змінної. Один зі способів зробити це — мати стовпець, що представляє кожну групу в категорії.
# Для кожного стовпця значення будуть 1 або 0, де 1 означає включення групи, а 0 означає виключення. Це перетворення називається одним гарячим кодуванням.
# Вам не потрібно робити це вручну, модуль Python Pandas має функцію, що викликається, get_dummies()яка виконує одне гаряче кодування.
import pandas as pd

# Модуль pandas дозволяє нам читати файли csv і маніпулювати об’єктами DataFrame:
cars = pd.read_csv('data.csv')

# Це також дозволяє нам створювати фіктивні змінні:
ohe_cars = pd.get_dummies(cars[['Car']])

print(ohe_cars.to_string())

# Передбачте CO2
# Ми можемо використовувати цю додаткову інформацію разом із об’ємом і вагою для прогнозування CO2
# Щоб об’єднати інформацію, ми можемо використати concat()функцію від pandas.
# Потім ми повинні вибрати незалежні змінні (X) і додати фіктивні змінні по стовпцях.

# Також збережіть залежну змінну в y.
X = pd.concat([cars[['Volume', 'Weight']], ohe_cars], axis=1)
y = cars['CO2']

# Нам також потрібно імпортувати метод із sklearn для створення лінійної моделі
from sklearn import linear_model

# Тепер ми можемо підігнати дані до лінійної регресії:
regr = linear_model.LinearRegression()
regr.fit(X,y)

# Нарешті ми можемо передбачити викиди CO2 на основі ваги, об’єму та виробника автомобіля.
##predict the CO2 emission of a Volvo where the weight is 2300kg, and the volume is 1300cm3:
predictedCO2 = regr.predict([[2300, 1300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]])

print(predictedCO2)

# Думування
# Немає необхідності створювати один стовпець для кожної групи у вашій категорії. Інформацію можна зберегти, використовуючи на 1 стовпець менше кількості груп, які у вас є.
# Наприклад, у вас є стовпець, який представляє кольори, і в цьому стовпці є два кольори, червоний і синій.
colors = pd.DataFrame({'color': ['blue', 'red']})
print(colors)

# Ви можете створити 1 стовпець під назвою червоний, де 1 означає червоний колір, а 0 означає нечервоний, тобто синій.
# Для цього ми можемо використати ту саму функцію, яку ми використовували для одного гарячого кодування, get_dummies, а потім відкинути один зі стовпців. Є аргумент drop_first, який дозволяє нам виключити перший стовпець із результуючої таблиці.
dummies = pd.get_dummies(colors, drop_first=True)
print(dummies)

# Що робити, якщо у вас більше 2 груп? Як кілька груп можна представити на 1 стовпець менше?
# Скажімо, цього разу у нас є три кольори: червоний, синій і зелений. Коли ми get_dummies відкидаємо перший стовпець, ми отримуємо наступну таблицю.
colors = pd.DataFrame({'color': ['blue', 'red', 'green']})
dummies = pd.get_dummies(colors, drop_first=True)
dummies['color'] = colors['color']

print(dummies)
